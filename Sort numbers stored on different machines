import java.util.PriorityQueue;

class ListNode {
    int data;
    ListNode next;

    public ListNode(int data) {
        this.data = data;
        this.next = null;
    }
}

class MinHeapNode implements Comparable<MinHeapNode> {
    ListNode head;

    public MinHeapNode(ListNode head) {
        this.head = head;
    }

    @Override
    public int compareTo(MinHeapNode other) {
        return this.head.data - other.head.data;
    }
}

public class ExternalSort {

    // Merge K sorted linked lists using a min-heap
    public static ListNode externalSort(ListNode[] array) {
        PriorityQueue<MinHeapNode> minHeap = new PriorityQueue<>();

        // Add the heads of all linked lists to the min-heap
        for (ListNode node : array) {
            if (node != null) {
                minHeap.offer(new MinHeapNode(node));
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (!minHeap.isEmpty()) {
            MinHeapNode minNode = minHeap.poll();
            tail.next = minNode.head;
            tail = tail.next;

            if (minNode.head.next != null) {
                minHeap.offer(new MinHeapNode(minNode.head.next));
            }
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int N = 3; // Number of machines

        // An array of pointers storing the head nodes of the linked lists
        ListNode[] array = new ListNode[N];

        // Create a Linked List 30->40->50 for the first machine
        array[0] = new ListNode(30);
        array[0].next = new ListNode(40);
        array[0].next.next = new ListNode(50);

        // Create a Linked List 35->45 for the second machine
        array[1] = new ListNode(35);
        array[1].next = new ListNode(45);

        // Create a Linked List 10->60->70->80 for the third machine
        array[2] = new ListNode(10);
        array[2].next = new ListNode(60);
        array[2].next.next = new ListNode(70);
        array[2].next.next.next = new ListNode(80);

        // Sort all elements
        ListNode sortedList = externalSort(array);

        // Print the sorted list
        System.out.println("Sorted List:");
        printList(sortedList);
    }
}
